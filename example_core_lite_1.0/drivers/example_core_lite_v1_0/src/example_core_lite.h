
#ifndef EXAMPLE_CORE_LITE_H
#define EXAMPLE_CORE_LITE_H


/****************** Include Files ********************/
#include "xil_types.h"
#include "xstatus.h"
#include "xparameters.h"
#include "stdint.h"
#include <inttypes.h>

#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG0_OFFSET 0
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG1_OFFSET 4
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG2_OFFSET 8
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG3_OFFSET 12
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG4_OFFSET 16
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG5_OFFSET 20
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG6_OFFSET 24
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG7_OFFSET 28
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG8_OFFSET 32
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG9_OFFSET 36
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG10_OFFSET 40
#define EXAMPLE_CORE_LITE_S00_AXI_SLV_REG11_OFFSET 44


/*! Define Base Address For All Core's Registers: Value is pulled from Xilinx AutoGenerated header for core  */
#define EXAMPLE_CORE_LITE_BASE_ADDRESS XPAR_EXAMPLE_CORE_LITE_0_S00_AXI_BASEADDR


/** @name Input Registers
Writable 32-bit Registers for Inputing Commands and Data
 */
///@{
#define gpio_output  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG0_OFFSET
#define case_selector  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG1_OFFSET
#define intger_A_input  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG2_OFFSET
#define intger_B_input  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG3_OFFSET
///@}


/** @name Output Registers
Readable 32-bit Status Registers for Reading Back Status and Data
 */
///@{
#define gpio_input  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG4_OFFSET
#define counter_read  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG5_OFFSET
#define sum_AB  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG6_OFFSET
#define product_AB_lo  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG7_OFFSET
#define product_AB_hi  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG8_OFFSET
#define bit_reverse_A  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG9_OFFSET
#define bit_inverse_B  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG10_OFFSET
#define case_selection  EXAMPLE_CORE_LITE_BASE_ADDRESS + EXAMPLE_CORE_LITE_S00_AXI_SLV_REG11_OFFSET
///@}




/**************************** Type Definitions *****************************/
/**
 *
 * Write a value to a EXAMPLE_CORE_LITE register. A 32 bit write is performed.
 * If the component is implemented in a smaller width, only the least
 * significant data is written.
 *
 * @param   BaseAddress is the base address of the EXAMPLE_CORE_LITEdevice.
 * @param   RegOffset is the register offset from the base to write to.
 * @param   Data is the data written to the register.
 *
 * @return  None.
 *
 * @note
 * C-style signature:
 * 	void EXAMPLE_CORE_LITE_mWriteReg(u32 BaseAddress, unsigned RegOffset, u32 Data)
 *
 */
#define EXAMPLE_CORE_LITE_mWriteReg(BaseAddress, RegOffset, Data) \
  	Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))

/**
 *
 * Read a value from a EXAMPLE_CORE_LITE register. A 32 bit read is performed.
 * If the component is implemented in a smaller width, only the least
 * significant data is read from the register. The most significant data
 * will be read as 0.
 *
 * @param   BaseAddress is the base address of the EXAMPLE_CORE_LITE device.
 * @param   RegOffset is the register offset from the base to write to.
 *
 * @return  Data is the data from the register.
 *
 * @note
 * C-style signature:
 * 	u32 EXAMPLE_CORE_LITE_mReadReg(u32 BaseAddress, unsigned RegOffset)
 *
 */
#define EXAMPLE_CORE_LITE_mReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))

/************************** Function Prototypes ****************************/
/**
 *
 * Run a series of self-test on the driver/device. 
 *
 * If the hardware system is not built correctly, this function may never
 * return to the caller.
 *
 * @param   None
 *
 * @return
 *
 *    - XST_SUCCESS   if all self-test code passed
 *    - XST_FAILURE   if any self-test code failed
 *
 * @note    Self test may fail if data memory and device are not on the same bus.
 *
 */
XStatus EXAMPLE_CORE_LITE_SelfTest();

#endif // EXAMPLE_CORE_LITE_H
